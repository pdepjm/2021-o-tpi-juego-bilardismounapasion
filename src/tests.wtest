import soundProducer.*
import cartas.*
import jugadores.*
import partida.*
import wollok.game.*
import elementos.*

describe "Tests de cartas"{
	
	const carta1 = new Carta(nroCarta = 1, elemento = fuego, poder = 4 , estaEnMazo = true , esDeJugador = true)
	const carta2 = new Carta(nroCarta = 2, elemento = agua, poder = 8 , estaEnMazo = false , esDeJugador = true)
	
	const carta3 = new Carta(nroCarta = 1, elemento = fuego, poder = 3 , estaEnMazo = true , esDeJugador = false)
	const carta4 = new Carta(nroCarta = 2, elemento = agua, poder = 8 , estaEnMazo = false , esDeJugador = false)
	
	test "Imagen de carta que esta en mazo y es de jugador"{
		assert.equals("carta_fuego.png",carta1.image())
	}
	
	test "Imagen de carta que esta en mazo y no es de jugador"{
		assert.equals("carta_reverso.png",carta3.image())
	}
	
	test "Imagen de carta que no esta en mazo y es de jugador"{
		assert.equals("carta_agua.png",carta2.image())
	}
	
	test "Imagen de carta que no esta en mazo y no es de jugador"{
		assert.equals("carta_agua.png",carta4.image())
	}
	
	test "Posicion de carta que esta en mazo y es de jugador"{
		assert.equals(game.at(2,1) ,carta1.posicionEnMazo())
	}
	
	test "Posicion de carta que esta en mazo y no es de jugador"{
		assert.equals(game.at(20,1) ,carta3.posicionEnMazo())
	}
	
	test "Posicion de carta que no esta en mazo y es de jugador"{
		assert.equals(game.at(12,12) ,carta2.posicionEnJuego())
	}
	
	test "Posicion de carta que no esta en mazo y no es de jugador"{
		assert.equals(game.at(16,12) ,carta4.posicionEnJuego())
	}
	

}

describe "Tests de jugadores"{
	const carta1 = new Carta(nroCarta = 1, elemento = fuego, poder = 4 , estaEnMazo = true , esDeJugador = true)
	const carta2 = new Carta(nroCarta = 2, elemento = agua, poder = 8 , estaEnMazo = true , esDeJugador = true)
	const carta3 = new Carta(nroCarta = 3, elemento = hielo, poder = 5 , estaEnMazo = true , esDeJugador = true)
	
	const carta4 = new Carta(nroCarta = 1, elemento = fuego, poder = 3 , estaEnMazo = true , esDeJugador = false)
	const carta5 = new Carta(nroCarta = 2, elemento = agua, poder = 8 , estaEnMazo = true , esDeJugador = false)
	const carta6 = new Carta(nroCarta = 3, elemento = hielo, poder = 10 , estaEnMazo = true , esDeJugador = false)

	const jugadorNuevo = new JugadorNuevo(cartas = [carta1 , carta2 , carta3] , poderBase = 75,imagen = "PerroChiquito.png", posicion = game.at(4, 7))
	const otroJugadorNuevo = new JugadorNuevo(cartas = [] , poderBase = 75, imagen = "PerroChiquito.png", posicion = game.at(4, 7))
	const jugadorExperimentado = new JugadorExperimentado(cartas = [carta4 , carta5 , carta6] , poderBase = 100, imagen = "PerroGrande.png", posicion = game.at(21, 7))

	test "Agregar una carta a un jugador"{
		otroJugadorNuevo.agregarCarta(carta1)
		assert.that(otroJugadorNuevo.tieneCarta(carta1))
	}
	
	test "Eliminar todas las cartas de un jugador"{
		jugadorNuevo.descartarse()
		assert.equals([],jugadorNuevo.cartas())
	}
	
	test "Poder de cartas que tiene un jugador"{
		assert.equals(21,jugadorExperimentado.poderCartas())
	}

	test "Poder total de un jugador nuevo"{
		assert.equals(92 ,jugadorNuevo.poderTotal())
	}
	
	test "Poder total de un jugador experimentado"{
		assert.equals(2100 ,jugadorExperimentado.poderTotal())
	}
}

describe "Test elementos" {
	
	test "Fuego le gana a Hielo"{
		assert.that(fuego.leGana(hielo))
	}
	
	test "Fuego no le gana a Agua"{
		assert.notThat(fuego.leGana(agua))
	}
	
	test "Agua le gana a Fuego"{
		assert.that(agua.leGana(fuego))
	}
	
	test "Agua no le gana a Hielo"{
		assert.notThat(agua.leGana(hielo))
	}
	
	test "Hielo le gana a Agua"{
		assert.that(hielo.leGana(agua))
	}
	
	test "Hielo no le gana a Fuego"{
		assert.notThat(hielo.leGana(fuego))
	}
}

